import com.rameses.annotations.*;
import com.rameses.util.KeyGen; 
import java.rmi.server.UID;

class OnlineBusinessApplicationService {

	@DataContext( dynamic=true )
	def dynaEm; 

	@Service( dynamic=true ) 
	def dynaSvc;


	@ProxyMethod 
	public def approve( param ) {
		def app = findApp( param.objid, null );		
		if ( !app.state.toString().matches('OPEN')) 
			throw new Exception('Application record must be in OPEN status'); 

		
		def lob_ids = app.lobs.collect{ it.lob?.objid }.findAll{( it )}
		def em = dynaEm.lookup('lob_lobattribute'); 
        em.where("lobid IN ('"+ lob_ids.join("','") +"')"); 

        def lobattr_ids = em.list().collect{ it.lobattributeid }
        lobattr_ids.unique();

		def svc = null; 

		if ( app.apptype == 'NEW' ) {
			svc = dynaSvc.lookup('bpls/OnlineAppNewService'); 
		} 
		else {
			svc = dynaSvc.lookup('bpls/OnlineAppRenewalService'); 
		}

		svc.approve( app ); 
		
		em = dynaEm.lookup('vw_online_business_application'); 
		
		def findby = [ objid: app.objid ]; 
		def res = em.findProcessApp( findby ); 
		if ( !res ) throw new Exception('failed to locate record in findProcessApp'); 
		
		res.data = em.findBusinessApp( findby ); 
		if ( !res.data.apptype ) {
			res.data.apptype = res.apptype; 
		}
		if ( !res.data.lobattributes ) {
			res.data.lobattributes = lobattr_ids; 
		} 
		return res; 
	}

	@ProxyMethod 
	public void mapTaxpayer( param ) { 
		def app = findApp( param.objid, 'objid,state,apptype,datainfo' );	
		if ( !app.state.toString().matches('OPEN')) 
			throw new Exception('Application record must be in OPEN status'); 

		if ( app.apptype != 'NEW' )
			throw new Exception('This feature is applicable only for NEW application'); 

		if ( !param.taxpayerid )
			throw new Exception("'taxpayerid'  parameter is required in mapTaxpayer method"); 

		app.datainfo.taxpayerid = param.taxpayerid; 

		def em = dynaEm.lookup('online_business_application'); 
		em.find([ objid: app.objid ]).update([ datainfo: app.datainfo ]); 
	} 

	@ProxyMethod 
	public void unmapTaxpayer( param ) { 
		def app = findApp( param.objid, 'objid,state,apptype,datainfo' );	
		if ( !app.state.toString().matches('OPEN')) 
			throw new Exception('Application record must be in OPEN status'); 

		if ( app.apptype != 'NEW' )
			throw new Exception('This feature is applicable only for NEW application'); 

		app.datainfo.remove('taxpayerid'); 

		def em = dynaEm.lookup('online_business_application'); 
		em.find([ objid: app.objid ]).update([ datainfo: app.datainfo ]); 
	} 

	@ProxyMethod 
	public def updateRequirement( param ) { 
		if ( !param.appid ) 
			throw new Exception("'appid'  parameter is required in updateRequirement method"); 
		if ( !param.objid ) 
			throw new Exception("'objid'  parameter is required in updateRequirement method"); 

		def app = findApp( param.appid, 'objid,state,requirements' ); 
		if ( !app.state.toString().matches('OPEN')) 
			throw new Exception('Application record must be in OPEN status'); 

		def selectedItem = null; 
		if ( param.docid ) { 
			selectedItem = app.requirements.find{ it.docid == param.docid }
		} else {
			selectedItem = app.requirements.find{ it.objid == param.objid }
		}

		if  ( !selectedItem ) 
			throw new Exception('Cannot locate the selected requirement'); 

		selectedItem.refno = param.refno; 
		selectedItem.dtissued = param.dtissued; 
		selectedItem.placeissued = param.placeissued; 

		app.remove('state');

		def em = dynaEm.lookup('online_business_application'); 
		em.find([ objid: param.appid ]).update( app );
		return selectedItem; 
	} 


	def findApp( objid, selectFields ) {
		if ( !objid ) throw new Exception('objid parameter is required');  

		def em = dynaEm.lookup('online_business_application'); 

		def findby = [ objid: objid ];
		em = em.find( findby ); 
		if ( selectFields ) { 
			em.select( selectFields );
		} 

		def app = em.first(); 
		if ( app ) return app; 

		throw new Exception('Online application record not found'); 
	}
} 
