import com.rameses.annotations.*

class SyncService {

	@Service("QueryService")
	def localQrySvc;

	@Service(value="QueryService", connection="syncserver")
	def qrySvc;
	
	@Service(value="PersistenceService", connection="syncserver")
	def persistenceSvc;

	@Service( "OrgService")
	def orgSvc;

	@DataContext(dynamic=true)
	def db;

    @Env
    def env;

    @Service
    def self; 


	/****************************************************
	* This pulls data from the sync server 
	* and saves it to the local server
	****************************************************/
	@ProxyMethod
	public void pull( def o ) {
		if( !o._schemaname ) throw new Exception("Please provide a _schemaname");
		def em = db.lookup( o._schemaname );
		o._start = 0;
		o._limit = 10;
		while(true) {
			def list = qrySvc.getList( o );
			if( !list ) break;
			list.each {
                            it.system = 1;
                            em.save( it );
			}
			o._start += o._limit;
		}
	}

	/****************************************************
	* This pulls data from the local server 
	* and saves it to the sync server
	****************************************************/
	@ProxyMethod
	public void push( def o ) {
		if ( !o._schemaname ) throw new Exception("Please provide a _schemaname");

		def org = orgSvc.getRoot(); 
		def orgid = org.objid;
		def orgclass = org.orgclass; 

		o._start = 0;
		o._limit = 10;

		while ( true ) {
			def list = localQrySvc.getList( o );
			if ( !list ) break;

			def p = [_schemaname: o._schemaname, data: list, orgid: orgid, orgclass: orgclass]; 
			self.resolveDataForPush( p ); 

			list.each {
				it.orgid = orgid;
			}

			persistenceSvc.batchSave( p );
			o._start += o._limit;
		}
	}

	@ProxyMethod
	public void resolveDataForPush( param ) { 
		// param: _schemaname, data, orgid, orgclass
		// 
		// To be implemented via interceptors
	}
}
