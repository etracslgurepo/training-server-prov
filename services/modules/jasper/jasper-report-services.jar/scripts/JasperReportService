import com.rameses.annotations.*;
import com.rameses.osiris2.reports.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.io.*;
import java.net.*;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.util.*;

import com.rameses.server.BootLoader;

class JasperReportService  {
	
	@Context
	def appContext;

	@DataContext("sys_report_template")
	def reportTemplateEm;

	@Service
	def self; 

	@Service(dynamic=true)
	def dynaSvc;

	@Service("SysReportTemplateService")
	def sysReportTemplateSvc;


	String getOutputReportPath() {
		return BootLoader.getOutputDirPath() +"/"; 
	}
	String getTemplatePath() {
		return BootLoader.getTemplatesDirPath() +"/"; 
	}
	String getCustomPath() {
		return BootLoader.getTemplatesDirPath() +"/custom/"; 
	}

	@ProxyMethod
	public def generateReport( Map o ) {
		def params = o.parameters;				
		def data = o.data;
		def template = o.template;
		def reportid = o.reportid;
		def org = o.org;

		try {

			// -----------------------------------------------------------
			// in case there is no data found, get the data automatically
			// -----------------------------------------------------------			
			if ( !data ) {
				if ( !params ) {
					//if refid is passed, put it in parameters as objid field
					if ( o.refid ) params = [ objid: o.refid ];
				}
				if ( !params ) throw new Exception("'parameters'  is required in JasperReportService.generateReport")

				def svc = dynaSvc.lookup("FormReportService" );
				def result = svc.getData([ reportid: reportid, parameters: params ]);
				data = result.data;
			}

			if ( data.template ) template = data.template;

			if ( !template ) throw new Exception("template is required in JasperReportService.generateReport");


			def jReport = null;
			def classLoader = null;
			def headerInfoProps = [:]; 
			File headerinfo_file = null; 

			def tmp = reportTemplateEm.find([ name: template ]).first(); 
			if ( tmp ) {
				def tmpSrc = [
					getResources: { id->
						return sysReportTemplateSvc.getResources([ name:id ]);
					},
					getContent: { id->
						return sysReportTemplateSvc.getContent([ name:id ]);
					}
				] as SysReportTemplateSource;

				def tp = new SysReportTemplate( "reportcache", tmp.filepath );
				jReport = tp.getReport( tmpSrc );

				classLoader = new SysReportTemplateClassLoader( tp ); 
				
				def context_dir = new File( "reportcache", tmp.filepath ).getParentFile(); 
				headerinfo_file = new File( context_dir, "headerinfo" ); 
			}
			else {
				// --------------------------------------------------------
				// setup the reports paths
				// --------------------------------------------------------
				def _basepath = getTemplatePath();
				def _customPath = getCustomPath();
				if ( org ) { 
					_customPath = getCustomPath() + org +"/"; 
				} 

				// --------------------------------------------------------
				// load jar files
				// --------------------------------------------------------
				def custFiles = new File( _customPath );
				def files = new File( _basepath );

				def filter = { f,fname -> fname.endsWith(".jar") } as FilenameFilter;
				def urls = [];
				custFiles.listFiles(filter).each {
					urls << it.toURI().toURL();
				}
				files.listFiles( filter ).each {
					urls << it.toURI().toURL();
				}

				// --------------------------------------------------------
				// fix filename and prefix if any
				// --------------------------------------------------------

				def _fprefix = null;
				if( template.contains("/") ) {
					int lastIndex = template.lastIndexOf("/");
					_fprefix = template.substring( 0, lastIndex );
					template = template.substring( lastIndex + 1 );
				}

				// --------------------------------------------------------
				// load the classloader
				// --------------------------------------------------------
				classLoader = new CustomClassLoader( urls.toArray() as URL[], getClass().getClassLoader() );
				classLoader.basepath = _basepath;
				classLoader.customPath = _customPath;
				classLoader.fileprefix = _fprefix; 

				// --------------------------------------------------------
				// get the main report name
				// --------------------------------------------------------
				def srcFile = classLoader.getResource( template + ".jasper" );				
				jReport = JRLoader.loadObject( srcFile );

				def srcFilePath = srcFile.toString();
				if ( srcFilePath.startsWith('jar:file:/')) {
					int idx = srcFilePath.indexOf('.jar!'); 
					srcFilePath = srcFilePath.substring( idx+5 ); 
					if ( srcFilePath.startsWith('/')) {
						srcFilePath = srcFilePath.substring(1); 
					}

					idx = srcFilePath.lastIndexOf('/');
					
					def arr = [];  
					arr << (idx > 0 ? srcFilePath.substring(0, idx) : '');
					arr << 'headerinfo';

					def headerInfoPath = arr.findAll{( it )}.join('/');
					def urlFactory = com.rameses.util.URLStreamHandlers.createFactory( classLoader );
					def urlHandler = urlFactory.createURLStreamHandler("classpath");
					if ( urlHandler ) {
						def headerUrl = urlHandler.getResource( headerInfoPath ); 
						if ( headerUrl ) headerInfoProps = createPropertiesFromURL( headerUrl ); 
					}
				}
			}	

			// --------------------------------------------------------
			// Load the reports
			// --------------------------------------------------------

			// load the parameters 
			// 
			def report_params = [:]; 
			if ( o.parameters instanceof Map ) {
				report_params.putAll( o.parameters ); 
			}

			def standardParams = self.getStandardParameter(); 
			if ( standardParams instanceof Map ) {
				report_params.putAll( standardParams ); 
			}

			if ( headerInfoProps instanceof Map ) {
				report_params.putAll( headerInfoProps ); 
			}


			def dateSvc = dynaSvc.lookup('DateService'); 
			report_params.PRINTDATE = dateSvc.getServerDate(); 

			if ( headerinfo_file && headerinfo_file.exists()) { 
				report_params.putAll( createPropertiesFromFile( headerinfo_file )); 
			}


			def headerName = data.reportheader;
			if ( headerName ) {
				def mprops = sysReportTemplateSvc.getHeader([ name: headerName ]);
				if ( mprops ) { 
					report_params.putAll( mprops );
				}
				else {
					def inp = null;
					try {
						def url = classLoader.getResource( headerName );
						inp = url.openStream();

						def props = new Properties();
						props.load( inp );
						report_params.putAll( props ); 
					}
					catch(Throwable t) {
						// do nothing 
					}
					finally {
						try { inp.close(); }catch(Throwable t){;} 
					}
				}
			}

			report_params.REPORT_CLASS_LOADER = classLoader;
			report_params.REPORT_URL_HANDLER_FACTORY = com.rameses.util.URLStreamHandlers.createFactory( classLoader );

			def jasperFile = JasperFillManager.fillReport( jReport, report_params, new ReportDataSource( data ) );

			String tokenid = Encoder.MD5.encode( new UID().toString());
			String destFilename = getOutputReportPath() + tokenid +".pdf";
			JasperExportManager.exportReportToPdfFile( jasperFile, destFilename );

			return [ tokenid: tokenid ]; 
		}
		catch(Throwable t) {
			t.printStackTrace();
			return [status: "ERROR", error: t.getMessage()];
		}
	}

	@ProxyMethod 
	public def getStandardParameter() {
		return [:]; 
	}


	def createPropertiesFromURL( java.net.URL url ) {
		def inp = null; 
		def props = new Properties(); 
		try {
			inp = url.openStream(); 
			props.load( inp ); 
		} 
		catch(Throwable t) {;}
		finally {
			try { inp.close(); }catch(Throwable t) {;}
		} 
		return props; 
	}

	def createPropertiesFromFile( java.io.File file ) {
		def inp = null; 
		def props = new Properties(); 
		try {
			inp = new java.io.FileInputStream( file );
			props.load( inp ); 
		} 
		catch(Throwable t) {;}
		finally {
			try { inp.close(); }catch(Throwable t) {;}
		} 
		return props; 
	}	
}

public class CustomClassLoader extends URLClassLoader {
	
	String customPath;
	String basepath;
	String fileprefix;

	public CustomClassLoader( URL[] urls, ClassLoader parent) {
		super( urls, parent );
	}

	public URL getResource(String name) { 
		// sequence: 
		// search in custom path file
		// search in jar
		// search in basepath

		String sname = name;
		if( fileprefix ) sname = fileprefix + "/" + name;
		//println "get resource " + sname;

		def f = new File( customPath +  sname );
		if( f.exists() ) return f.toURI().toURL();		        

		def fu = super.getResource( sname );
		if( fu !=null ) return fu;

		f = new File( basepath + sname );
		if(f.exists()) return f.toURI().toURL();
		return null;
    }
}


